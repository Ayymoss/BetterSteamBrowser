// <auto-generated />
using System;
using BetterSteamBrowser.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BetterSteamBrowser.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BetterSteamBrowser.Domain.Entities.EFBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Added")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("ApiFilter")
                        .HasColumnType("boolean");

                    b.Property<int>("SteamGameId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SteamGameId");

                    b.ToTable("EFBlocks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Added = new DateTimeOffset(new DateTime(2023, 12, 8, 20, 25, 7, 727, DateTimeKind.Unspecified).AddTicks(8666), new TimeSpan(0, 0, 0, 0, 0)),
                            ApiFilter = false,
                            SteamGameId = -2,
                            Type = 2,
                            UserId = "ADMIN_SEED_ID",
                            Value = "FASTCUP"
                        },
                        new
                        {
                            Id = -2,
                            Added = new DateTimeOffset(new DateTime(2023, 12, 8, 20, 25, 7, 727, DateTimeKind.Unspecified).AddTicks(8674), new TimeSpan(0, 0, 0, 0, 0)),
                            ApiFilter = true,
                            SteamGameId = 12,
                            Type = 1,
                            UserId = "ADMIN_SEED_ID",
                            Value = "uwujka"
                        },
                        new
                        {
                            Id = -3,
                            Added = new DateTimeOffset(new DateTime(2023, 12, 8, 20, 25, 7, 727, DateTimeKind.Unspecified).AddTicks(8676), new TimeSpan(0, 0, 0, 0, 0)),
                            ApiFilter = true,
                            SteamGameId = -2,
                            Type = 1,
                            UserId = "ADMIN_SEED_ID",
                            Value = "nosteam"
                        },
                        new
                        {
                            Id = -4,
                            Added = new DateTimeOffset(new DateTime(2023, 12, 8, 20, 25, 7, 727, DateTimeKind.Unspecified).AddTicks(8677), new TimeSpan(0, 0, 0, 0, 0)),
                            ApiFilter = true,
                            SteamGameId = -2,
                            Type = 1,
                            UserId = "ADMIN_SEED_ID",
                            Value = "no-steam"
                        },
                        new
                        {
                            Id = -5,
                            Added = new DateTimeOffset(new DateTime(2023, 12, 8, 20, 25, 7, 727, DateTimeKind.Unspecified).AddTicks(8678), new TimeSpan(0, 0, 0, 0, 0)),
                            ApiFilter = false,
                            SteamGameId = -2,
                            Type = 2,
                            UserId = "ADMIN_SEED_ID",
                            Value = "Develop"
                        },
                        new
                        {
                            Id = -6,
                            Added = new DateTimeOffset(new DateTime(2023, 12, 8, 20, 25, 7, 727, DateTimeKind.Unspecified).AddTicks(8679), new TimeSpan(0, 0, 0, 0, 0)),
                            ApiFilter = false,
                            SteamGameId = -2,
                            Type = 2,
                            UserId = "ADMIN_SEED_ID",
                            Value = "FACEIT"
                        },
                        new
                        {
                            Id = -7,
                            Added = new DateTimeOffset(new DateTime(2023, 12, 8, 20, 25, 7, 727, DateTimeKind.Unspecified).AddTicks(8745), new TimeSpan(0, 0, 0, 0, 0)),
                            ApiFilter = false,
                            SteamGameId = 12,
                            Type = 3,
                            UserId = "ADMIN_SEED_ID",
                            Value = "RU"
                        },
                        new
                        {
                            Id = -8,
                            Added = new DateTimeOffset(new DateTime(2023, 12, 8, 20, 25, 7, 727, DateTimeKind.Unspecified).AddTicks(8747), new TimeSpan(0, 0, 0, 0, 0)),
                            ApiFilter = false,
                            SteamGameId = 27,
                            Type = 3,
                            UserId = "ADMIN_SEED_ID",
                            Value = "RU"
                        },
                        new
                        {
                            Id = -9,
                            Added = new DateTimeOffset(new DateTime(2023, 12, 8, 20, 25, 7, 727, DateTimeKind.Unspecified).AddTicks(8748), new TimeSpan(0, 0, 0, 0, 0)),
                            ApiFilter = false,
                            SteamGameId = 12,
                            Type = 2,
                            UserId = "ADMIN_SEED_ID",
                            Value = "Counter-Strike 2"
                        });
                });

            modelBuilder.Entity("BetterSteamBrowser.Domain.Entities.EFFavourite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ServerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.HasIndex("UserId");

                    b.ToTable("EFFavourites", (string)null);
                });

            modelBuilder.Entity("BetterSteamBrowser.Domain.Entities.EFServer", b =>
                {
                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<bool>("Blocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Map")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Players")
                        .HasColumnType("integer");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<int>("SteamGameId")
                        .HasColumnType("integer");

                    b.HasKey("Hash");

                    b.HasIndex("SteamGameId");

                    b.ToTable("EFServers", (string)null);
                });

            modelBuilder.Entity("BetterSteamBrowser.Domain.Entities.EFSteamGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AppId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EFSteamGames", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -2,
                            AppId = -2,
                            Name = "All Games"
                        },
                        new
                        {
                            Id = -1,
                            AppId = -1,
                            Name = "Unknown"
                        },
                        new
                        {
                            Id = 1,
                            AppId = 10,
                            Name = "Counter-Strike"
                        },
                        new
                        {
                            Id = 2,
                            AppId = 30,
                            Name = "Day of Defeat"
                        },
                        new
                        {
                            Id = 3,
                            AppId = 50,
                            Name = "Half-Life: Opposing Force"
                        },
                        new
                        {
                            Id = 4,
                            AppId = 70,
                            Name = "Half-Life"
                        },
                        new
                        {
                            Id = 5,
                            AppId = 80,
                            Name = "Condition Zero"
                        },
                        new
                        {
                            Id = 6,
                            AppId = 240,
                            Name = "Counter-Strike: Source"
                        },
                        new
                        {
                            Id = 7,
                            AppId = 300,
                            Name = "Day of Defeat: Source"
                        },
                        new
                        {
                            Id = 8,
                            AppId = 320,
                            Name = "Half-Life 2: Deathmatch"
                        },
                        new
                        {
                            Id = 9,
                            AppId = 440,
                            Name = "Team Fortress 2"
                        },
                        new
                        {
                            Id = 10,
                            AppId = 500,
                            Name = "Left 4 Dead"
                        },
                        new
                        {
                            Id = 11,
                            AppId = 550,
                            Name = "Left 4 Dead 2"
                        },
                        new
                        {
                            Id = 12,
                            AppId = 730,
                            Name = "Counter-Strike 2"
                        },
                        new
                        {
                            Id = 13,
                            AppId = 1250,
                            Name = "Killing Floor"
                        },
                        new
                        {
                            Id = 14,
                            AppId = 4000,
                            Name = "Garry's Mod"
                        },
                        new
                        {
                            Id = 15,
                            AppId = 4920,
                            Name = "Natural Selection 2"
                        },
                        new
                        {
                            Id = 16,
                            AppId = 17520,
                            Name = "Synergy"
                        },
                        new
                        {
                            Id = 17,
                            AppId = 17550,
                            Name = "Eternal Silence"
                        },
                        new
                        {
                            Id = 18,
                            AppId = 33930,
                            Name = "Arma 2: Operation Arrowhead"
                        },
                        new
                        {
                            Id = 19,
                            AppId = 107410,
                            Name = "Arma 3"
                        },
                        new
                        {
                            Id = 20,
                            AppId = 108600,
                            Name = "Project Zomboid"
                        },
                        new
                        {
                            Id = 21,
                            AppId = 221100,
                            Name = "DayZ"
                        },
                        new
                        {
                            Id = 22,
                            AppId = 222880,
                            Name = "Insurgency"
                        },
                        new
                        {
                            Id = 23,
                            AppId = 232090,
                            Name = "Killing Floor 2"
                        },
                        new
                        {
                            Id = 24,
                            AppId = 242760,
                            Name = "The Forest"
                        },
                        new
                        {
                            Id = 25,
                            AppId = 246900,
                            Name = "Viscera Cleanup Detail"
                        },
                        new
                        {
                            Id = 26,
                            AppId = 251570,
                            Name = "7 Days to Die"
                        },
                        new
                        {
                            Id = 27,
                            AppId = 252490,
                            Name = "Rust"
                        },
                        new
                        {
                            Id = 28,
                            AppId = 304930,
                            Name = "Unturned"
                        },
                        new
                        {
                            Id = 29,
                            AppId = 311210,
                            Name = "Call of Duty: Black Ops III"
                        },
                        new
                        {
                            Id = 30,
                            AppId = 312660,
                            Name = "Sniper Elite 4"
                        },
                        new
                        {
                            Id = 31,
                            AppId = 393380,
                            Name = "Squad"
                        },
                        new
                        {
                            Id = 32,
                            AppId = 394690,
                            Name = "Tower Unite"
                        },
                        new
                        {
                            Id = 33,
                            AppId = 466560,
                            Name = "Northgard"
                        },
                        new
                        {
                            Id = 34,
                            AppId = 632360,
                            Name = "Risk of Rain 2"
                        },
                        new
                        {
                            Id = 35,
                            AppId = 686810,
                            Name = "Hell Let Loose"
                        },
                        new
                        {
                            Id = 36,
                            AppId = 1604030,
                            Name = "V Rising"
                        },
                        new
                        {
                            Id = 37,
                            AppId = 346110,
                            Name = "ARK: Survival Evolved"
                        });
                });

            modelBuilder.Entity("BetterSteamBrowser.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ADMIN_SEED_ID",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d0316ab-6a64-41f3-b1d7-50f88e465c43",
                            Email = "superadmin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@EXAMPLE.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAELnQmDSM9pPHpB+9exdpzz5E11W0lGEJmrnXXYSdkBreKDWCG0iItB/9qRQ/iCFmCw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fea5f7a9-b2e4-4e12-9790-977ca690cc89",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ADMIN_SEED_ID",
                            RoleId = "fea5f7a9-b2e4-4e12-9790-977ca690cc89"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BetterSteamBrowser.Domain.Entities.EFBlock", b =>
                {
                    b.HasOne("BetterSteamBrowser.Domain.Entities.EFSteamGame", "SteamGame")
                        .WithMany()
                        .HasForeignKey("SteamGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SteamGame");
                });

            modelBuilder.Entity("BetterSteamBrowser.Domain.Entities.EFFavourite", b =>
                {
                    b.HasOne("BetterSteamBrowser.Domain.Entities.EFServer", "Server")
                        .WithMany()
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BetterSteamBrowser.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("BetterSteamBrowser.Domain.Entities.EFServer", b =>
                {
                    b.HasOne("BetterSteamBrowser.Domain.Entities.EFSteamGame", "SteamGame")
                        .WithMany()
                        .HasForeignKey("SteamGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SteamGame");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BetterSteamBrowser.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BetterSteamBrowser.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BetterSteamBrowser.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BetterSteamBrowser.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
